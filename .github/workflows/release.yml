name: Release

# Using a single file workflow is the preferred solution for our CI over workflow_runs.
# 1. It generates only 1 action item in the list making it more readable
# 2. It includes the PR/Commit text in the action item
# 3. Artifacts are not available between workflows.

# This is only allowing pushes on the moonbeam repo or pull request.
# In the case of pull request, the CI executes the workflow from
# the commit the **PR is merging into**. This prevents malicious attack trying
# to change the CI in the PR.
####### DO NOT CHANGE THIS !! #######
on: ["push"]

jobs:
  ####### Check files and formatting #######

  check-copyright:
    runs-on: self-hosted
    steps:
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        # by default the pull_requst_target event checks out the base branch, i.e. dev
        # so we need to explicitly checkout the head of the PR
        # we use fetch-depth 0 to make sure the full history is checked out and we can compare against
        # the base commit (branch) of the PR
        # more info https://github.community/t/github-actions-are-severely-limited-on-prs/18179/16
        # we checkout merge_commit here as this contains all new code from dev also. we don't need to compare against base_commit
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          # repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: Checkout
        # for non PR runs we just checkout the default, which is a sha on a branch probably
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
      - name: Find un-copyrighted files
        run: |
          find . -name '*.rs' -exec grep  -H -E -o -c Copyright {} \; | grep ':0' || true
          FILECOUNT=$(find . -name '*.rs' -exec grep  -H -E -o -c  'Copyright'  {} \; | grep -c ':0' || true)
          if [[ $FILECOUNT -eq 0 ]]; then
            true
          else
            false
          fi

  check-links:
    runs-on: self-hosted
    steps:
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"

  check-editorconfig:
    name: "Check editorconfig"
    runs-on: self-hosted
    steps:
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
      - name: Setup editorconfig checker
        run: |
          ls /tmp/bin/ec-linux-amd64 || \
          cd /tmp && \
          wget https://github.com/editorconfig-checker/editorconfig-checker/releases/download/2.1.0/ec-linux-amd64.tar.gz && \
          tar xvf ec-linux-amd64.tar.gz && \
          chmod +x bin/ec-linux-amd64
      - name: Check files
        run: /tmp/bin/ec-linux-amd64

  check-prettier:
    name: "Check with Prettier"
    runs-on: self-hosted
    steps:
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Check with Prettier
        run: npx prettier --check --ignore-path .gitignore  '**/*.(yml|js|ts|json)'

  ####### Building and Testing binaries #######

  build:
    runs-on: self-hosted
    env:
      CARGO_SCCACHE_VERSION: 0.2.14-alpha.0-parity
    outputs:
      RUSTC: ${{ steps.get-rust-versions.outputs.rustc }}
    steps:
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
        # Install sccache
      - uses: actions/cache@v2
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache
          key: ${{ runner.OS }}-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}-v1

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - name: Install sccache
        run: |
          if [ ! -f ${{ runner.tool_cache }}/cargo-sccache/bin/sccache ]; then
            cargo install sccache --git https://github.com/paritytech/sccache.git --no-default-features --features=dist-client --root ${{ runner.tool_cache }}/cargo-sccache
          fi
        shell: bash
      - name: Start sccache
        run: |
          chmod +x ${{ runner.tool_cache }}/cargo-sccache/bin/sccache
          ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
          ${{ runner.tool_cache }}/cargo-sccache/bin/sccache -s
          echo "RUSTC_WRAPPER=${{ runner.tool_cache }}/cargo-sccache/bin/sccache" >> $GITHUB_ENV
      - id: get-rust-versions
        run: |
          echo "::set-output name=rustc::$(rustc --version)"
      - name: Build Node
        run: cargo build --release --verbose --all
      # We determine whether there are unmodified Cargo.lock files by:
      # 1. Asking git for a list of all modified files
      # 2. Using grep to reduce the list to only Cargo.lock files
      # 3. Counting the number of lines of output
      - name: Check Cargo Toml
        run: |
          FILECOUNT=$(git diff-index --name-only HEAD | grep Cargo.lock | wc -l)
          if [[ $FILECOUNT -eq 0 ]]; then
            echo "All lock files are valid"
          else
            echo "The following Cargo.lock files have uncommitted changes"
            git diff-index --name-only HEAD | grep Cargo.lock
            false
          fi
      - name: Unit tests
        run: cargo test --release --verbose --all
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Typescript integration tests (against dev service)
        run: |
          cd moonbeam-types-bundle
          npm install
          cd ../tests
          npm install
          npm run test;
      - name: Save parachain binary
        run: |
          mkdir -p build
          cp target/release/moonbeam build/moonbeam;
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Check with Clippy
        run: cargo clippy --release --workspace
      - name: Format code with rustfmt
        run: cargo fmt -- --check

  ####### Prepare and Deploy Docker images #######

  generate-parachain-specs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Generate specs
        run: |
          chmod uog+x build/moonbeam
          MOONBEAM_BINARY=build/moonbeam scripts/generate-parachain-specs.sh
      - name: Upload parachain specs
        uses: actions/upload-artifact@v2
        with:
          name: moonbeam
          path: build

  docker-parachain:
    runs-on: self-hosted
    needs: ["build", "generate-parachain-specs"]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=purestake/moonbase-parachain
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push parachain
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/moonbase-parachain.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  docker-moonbeam:
    runs-on: self-hosted
    needs: ["build", "generate-parachain-specs"]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=purestake/moonbeam
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push moonbeam
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/moonbeam.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  ####### Prepare the release draft #######

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: ["build", "generate-parachain-specs"]
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: moonbeam
      # - name: Set up Ruby 2.7
      #   uses: actions/setup-ruby@v1
      #   with:
      #     ruby-version: 2.7
      # - name: Generate release text
      #   env:
      #     RUSTC: ${{ needs.build.outputs.rustc }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gem install changelogerator git toml
      #     ruby $GITHUB_WORKSPACE/moonbeam/scripts/github/generate_release_text.rb | tee release_text.md
      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Moonbase ${{ github.ref }}
          body: "TBD"
          draft: true

  publish-runtimes:
    runs-on: ubuntu-latest
    needs: ["publish-draft-release"]
    # We want to store the binaries also when it is not a version release. This is used
    # in case such as providing binaries when creating a new tutorial version.
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Set up Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Get runtime version
        id: get-runtime-ver
        run: |
          runtime_ver="$(ruby -e 'require "./scripts/github/lib.rb"; puts get_runtime("lib.rs")')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      - name: Upload wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/parachain-runtime.wasm
          asset_name: runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.wasm
          asset_content_type: application/wasm
      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/moonbeam
          asset_name: moonbeam
          asset_content_type: application/octet-stream
